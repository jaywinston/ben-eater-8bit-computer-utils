#!/bin/bash

# be-as: POC (no data validation) assembler for Ben Eater's 8-bit computer

noarg=___

# label => "name:"
declare -A syms=( [$noarg]= ) OPS=(
  [NOP]=0
  [LDA]=1
  [ADD]=2
  [SUB]=3
  [STA]=4
  [LDI]=5
  [JMP]=6
  [JC]=7
  [JZ]=8
  [OUT]=e
  [HLT]=f
)

hex=( {0..9} {a..f} )

in="${1:-/dev/stdin}"

# build symbol table
addr=0
while read line ; do
  if [[ "$line" =~ : ]] ; then
    if [[ "$line" =~ [[:space:]]*$noarg: ]] ; then
      builtin echo "can't use $noarg as a symbol :\\" >&2
      exit 1
    fi
    toks=( $line )  # this should be a function for a uniform API, see below
    sym=${toks[0]%:*}
    syms[$sym]=$addr
  else
    ((addr++))
  fi
done < "$in"

# assemble image
addr=0
image=
while read line ; do
  if ! [[ "$line" =~ : ]] ; then
    toks=( $line )
    optok=${toks[0]^^}
    op=${OPS[$optok]}
    argtok=${toks[1]:-$noarg}  # $noarg resolves to '' in the symbol table
    sym=${syms[$argtok]}       # symbol?
    lit=${sym:-$argtok}        # no? literal?
    val=${lit:-0}              # no? no argument so use whatever (Ben used 0)
    arg=${hex[$val]}
    image+='\x'"${hex[$((addr++))]}"  # address
    image+='\x'"$op$arg"              # command
  fi
done < "$in"

builtin echo -en $image
